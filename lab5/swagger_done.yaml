openapi: 3.0.3
info:
  version: '1.0'
  title: 'Countries API Laravel & JWT'
  description: Lab006 PAB
servers:
  - description: Laravel
    url: http://localhost:8000/api
paths:

  /auth/me:
    post:
      tags:
        - auth
      summary: Returns the logged-in user's data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns the user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
          
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logs the user out and invalidates the JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refreshes the JWT token and returns a new access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully refreshed the access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_token'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Requests a password reset token by providing the user's email
      description: |
        This endpoint allows a user to request a password reset token by providing their email. 
        If the email exists in the system, a token will be generated and logged (in place of sending an email).
        The user can then use this token to reset their password via another endpoint.
      operationId: forgotPassword
      requestBody:
        description: User email to receive the password reset token
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '202':
          description: Token request accepted, token logged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: null
        '404':
          description: User not found with the provided email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '422':
          description: Invalid or missing email format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format or email is required

  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Resets the user's password using the provided token and new password
      description: |
        This endpoint allows a user to reset their password by providing a valid reset token, their email address, and a new password. 
        The reset token should have been generated earlier (via the forgot password endpoint).
      operationId: resetPassword
      requestBody:
        description: Request body for resetting the user's password
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - email
                - password
              properties:
                token:
                  type: string
                  example: reset-token-here
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 3
                  example: newpassword123
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password has been successfully reset."
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '422':
          description: Invalid or missing input data (e.g., invalid email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password format."
                      
  /auth/login:
    post:
      security:
        - bearerAuth: []
      tags:
        - auth 
      summary: Get a JWT via given credentials
      responses:  
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access_token'
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials' 
              
  /countries:
    get:
      tags:
        - countries
      summary: Returns all countries
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of countries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryCollection'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    post:
      tags:
        - countries
      summary: Stores a new country
      operationId: storeCountry
      security:
        - bearerAuth: []
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResource'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          description: unprocessable content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCountryRequest'
        description: new country data
        required: true
  /countries/{countryId}:
    get:
      tags:
        - countries
      summary: Returns a country based on ID
      operationId: getCountryById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: country response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResource'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'not found' 
    put:
      tags:
        - countries
      summary: Updates a country
      operationId: updateCountry
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResource'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: country not found
        '422':
          description: unprocessable content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCountryRequest'
        description: updated country data
        required: true 
    delete:
      tags:
        - countries
      summary: Deletes a country
      operationId: deleteCountry
      security:
        - bearerAuth: []
      responses:
        '204':
          description: successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: not found
    parameters:
      - $ref: '#/components/parameters/countryId'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedResponse:
      description: Unauthorized request. JWT token is invalid or missing.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
                
    ForbiddenResponse:
      description: Forbidden. User does not have the required permissions to access this resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Forbidden
  parameters:
    countryId:
      name: countryId
      in: path
      description: ID of country to use
      required: true
      schema:
        type: integer
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          maxLength: 50
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        created_at:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-01-02T00:00:00Z
    UserResource:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
  
    Country:
      type: object
      required:
        - name
        - code
        - currency
        - area
        - language
      properties:
        name:
          type: string
          maxLength: 50
          example: Name
        code:
          type: string
          maxLength: 3
          example: COD
        currency:
          type: string
          maxLength: 30
          example: Currency          
        area:
          type: integer
          format: int32
          minimum: 0
          example: 100000
        language:
          type: string
          maxLength: 50
          example: language
    CountryResource:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
      allOf:
        - $ref: '#/components/schemas/Country'
        - type: object
    CountryCollection:
      type: object  
      properties:
        data:
          type: array
          items:
           $ref: '#/components/schemas/CountryResource'
    StoreCountryRequest:
      type: object 
      allOf:
        - $ref: '#/components/schemas/Country'
        - type: object
    UpdateCountryRequest:
      type: object 
      allOf:
        - $ref: '#/components/schemas/Country'
        - type: object
    credentials:  
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string  
          format: email
          example: user@email.com
        password:
          type: string 
          example: pass
    access_token:
      type: object
      properties:
        access_token:
          type: string     
          example: header.payload.signature
        token_type:
          type: string 
          example: bearer            
        expires_in:
          type: integer 
          example: 60
      
security:
  - bearerAuth: []          