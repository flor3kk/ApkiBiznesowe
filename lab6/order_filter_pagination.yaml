openapi: 3.0.3
info:
  version: '1.0'
  title: 'Actors API Laravel'
  description: Lab007 PAB
servers:
  - description: Laravel
    url: http://localhost:8000/api
paths:
  /actors:
    get:
      tags:
        - actors
      summary: Returns all actors
      parameters:

        - name: page
          in: query
          description: Page number to retrieve. Defaults to 1 if not provided.
          required: false
          schema:
            type: integer
            default: 1
            example: 1
      
        - name: pageSize
          in: query
          description: Number of items per page. Defaults to 10 if not provided.
          required: false
          schema:
            type: integer
            default: 10
            example: 10

        - name: firstName
          in: query
          description: Filter actors by their first name.
          required: false
          schema:
            type: string
            example: "Daniel"
      
        - name: lastName
          in: query
          description: Filter actors by their last name.
          required: false
          schema:
            type: string
            example: "Craig"
      
        - name: birthday
          in: query
          description: Filter actors by their birthday (date).
          required: false
          schema:
            type: string
            format: date
            example: "1967-03-02"
      
        - name: height
          in: query
          description: Filter actors by their height (in cm).
          required: false
          schema:
            type: integer
            example: 178

        - name: sort
          in: query
          description: |
            Define the order in which the items in a response should be returned.
            Use comma-separated values for multiple sorting columns. 
            Each column should be followed by the sorting order, either `ASC` for ascending or `DESC` for descending.
            Column names should be in camelCase (e.g., 'firstName').
          required: false
          schema:
            type: string
            example: "firstName$ASC,lastName$DESC"
            pattern: "^[a-zA-Z]+\\$ASC|DESC(,[a-zA-Z]+\\$ASC|DESC)*$"
            description: |
              A comma-separated list where each entry consists of a column name in camelCase followed by `$ASC` or `$DESC` to indicate ascending or descending order.

      responses:
        '200':
          description: A list of actors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorCollection'
    post:
      tags:
        - actors
      summary: Stores a new actor
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorResource'
        '422':
          description: unprocessable content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreActorRequest'
        description: new actor data
        required: true  
  /actors/{actorId}:
    get:
      tags:
        - actors
      summary: Returns an actor based on ID
      responses:
        '200':
          description: actor response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorResource'
        '404':
          description: not found
    put:
      tags:
        - actors
      summary: Updates an actor
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorResource'
        '422':
          description: unprocessable content
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActorRequest'
        description: updated actor data
        required: true 
    delete:
      tags:
        - actors
      summary: Deletes an actor
      responses:
        '204':
          description: successful deleted
        '404':
          description: not found
    parameters:
      - $ref: '#/components/parameters/actorId'  
components:
  parameters:
    actorId:
      name: actorId
      in: path
      description: ID of actor to use
      required: true
      schema:
        type: integer  
  schemas:
    Actor:
      type: object
      required:
        - first_name
        - last_name
        - birthday
        - height
      properties:
        first_name:
          type: string
          maximum: 30
          example: Daniel
        last_name:
          type: string
          maximum: 30
          example: Craig
        birthday:
          type: string
          format: date
          example: '1967-03-02'
        height:
          type: integer
          format: int32
          minimum: 0
          maximum: 250
          example: 178
    ActorResource:
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
          example: 1
      allOf:
        - $ref: '#/components/schemas/Actor'
        - type: object          
    ActorCollection:
      type: object  
      properties:
        data:
          type: array
          items:
           $ref: '#/components/schemas/ActorResource'          
    StoreActorRequest:
      type: object 
      allOf:
        - $ref: '#/components/schemas/Actor'
        - type: object
    UpdateActorRequest:
      type: object 
      allOf:
        - $ref: '#/components/schemas/Actor'
        - type: object
